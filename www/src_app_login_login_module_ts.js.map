{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginPage } from './login.page';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  },\n  {\n    path: 'forgotten-password',\n    loadChildren: () => import('./forgotten-password/forgotten-password.module').then(m => m.ForgottenPasswordModule),\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes),\n  ],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginPage } from './login.page';\nimport { SharedModule } from 'src/shared/shared.module';\n\n\n\n\n@NgModule({\n  declarations: [LoginPage],\n  imports: [\n    LoginRoutingModule,\n    ...SharedModule.MODULE_LIST,\n  ]\n})\nexport class LoginModule { }\n","import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserCredential } from 'firebase/auth';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { LoginService } from 'src/shared/services/login.service';\nimport { ToasterService } from 'src/shared/services/toaster.service';\nimport { setStyleStatusBar } from 'src/shared/utils/function.utils';\nimport { AuthenticationConstants } from '../app.constants';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage {\n  loginForm: FormGroup;\n  hasNetworkError: boolean;\n  isPasswordVisible: boolean = false\n  authProviders = AuthenticationConstants.externeAuthProviders\n  constructor(\n    private readonly spinner: NgxSpinnerService,\n    private readonly formBuilder: FormBuilder,\n    private readonly loginService: LoginService,\n    private readonly router: Router,\n    private readonly toaster: ToasterService\n  ) { }\n\n  ngOnInit() {\n    this.initForm();\n  }\n\n  ionViewDidEnter() {\n    setStyleStatusBar(\"dark\")\n    this.spinner.hide('appSpinner')\n  }\n\n  private initForm(): void {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    })\n  }\n\n  onLoginWithEmail(): any {\n    this.spinner.show(\"appSpinner\")\n    this.loginService.signInEmail(this.loginForm.value)\n      .then(() => {\n        this.router.navigateByUrl('/main', { replaceUrl: true })\n      })\n      .catch(error => {\n        const errorKeyTrad = error.message.split('/')[1];\n        if (errorKeyTrad == \"network-request-failed\") {\n          this.hasNetworkError = true;\n        } else {\n          this.hasNetworkError = false;\n          this.loginForm.setErrors({ invalid: errorKeyTrad })\n        }\n        this.spinner.hide(\"appSpinner\")\n      })\n  }\n\n  onLoginWithProvider(provider: string) {\n    this.spinner.show(\"appSpinner\")\n    this.loginService.handleProvider(provider).then((result: UserCredential) => {\n      this.router.navigateByUrl('/main', { replaceUrl: true })\n    })\n      .catch((error) => {\n        this.spinner.hide(\"appSpinner\")\n        const errorKeyTrad = error.message.split('/')[1]?.replace(').', '');\n        this.toaster.presentErrorToast(\"ERROR.AUTHENTICATION.\" + errorKeyTrad, 1500)\n        console.log(errorKeyTrad);\n      });\n  }\n\n  onRedirectToRegister() {\n    this.router.navigateByUrl('/register-home', { replaceUrl: true })\n  }\n\n}"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}